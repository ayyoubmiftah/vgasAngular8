{"version":3,"sources":["/Users/AYYOUB/Desktop/a/a/AYYOUB/node_modules/ngx-ui-loader/fesm2015/ngx-ui-loader.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaiyBC,qKAKC;;;;;;;;;;;;;;;;83BAKwP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoVzP,q49CAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kcA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4ED,+LAGC;;;;;;;;;;;;;;;;;;kFAUA;;;;;;;;;;;;;;;;;;;;;;;;;CAuBD;;;;;;;;;;;oBAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgFD,kUAGC;;;;;;;;;;;;;;;;;;;;wGAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiED,2LAGC;;;;;;;;;;;;;wIAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCD,QAWC;;;;;;;;;;;;;;;;;;;;2CAIA","file":"ngx-ui-loader.js","sourcesContent":["import { InjectionToken, Injectable, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Directive, ElementRef, Renderer2, NgModule, SkipSelf } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { filter, finalize } from 'rxjs/operators';\nimport { NavigationStart, NavigationEnd, NavigationCancel, NavigationError, Router } from '@angular/router';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst SPINNER = {\n    ballScaleMultiple: 'ball-scale-multiple',\n    ballSpin: 'ball-spin',\n    ballSpinClockwise: 'ball-spin-clockwise',\n    ballSpinClockwiseFadeRotating: 'ball-spin-clockwise-fade-rotating',\n    ballSpinFadeRotating: 'ball-spin-fade-rotating',\n    chasingDots: 'chasing-dots',\n    circle: 'circle',\n    cubeGrid: 'cube-grid',\n    doubleBounce: 'double-bounce',\n    fadingCircle: 'fading-circle',\n    foldingCube: 'folding-cube',\n    pulse: 'pulse',\n    rectangleBounce: 'rectangle-bounce',\n    rectangleBounceParty: 'rectangle-bounce-party',\n    rectangleBouncePulseOut: 'rectangle-bounce-pulse-out',\n    rectangleBouncePulseOutRapid: 'rectangle-bounce-pulse-out-rapid',\n    rotatingPlane: 'rotating-plane',\n    squareJellyBox: 'square-jelly-box',\n    squareLoader: 'square-loader',\n    threeBounce: 'three-bounce',\n    threeStrings: 'three-strings',\n    wanderingCubes: 'wandering-cubes',\n};\n/** @enum {string} */\nconst POSITION = {\n    bottomCenter: 'bottom-center',\n    bottomLeft: 'bottom-left',\n    bottomRight: 'bottom-right',\n    centerCenter: 'center-center',\n    centerLeft: 'center-left',\n    centerRight: 'center-right',\n    topCenter: 'top-center',\n    topLeft: 'top-left',\n    topRight: 'top-right',\n};\n/** @enum {string} */\nconst PB_DIRECTION = {\n    leftToRight: 'ltr',\n    rightToLeft: 'rtl',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The default value of foreground task id\n * @type {?}\n */\nconst DEFAULT_FG_TASK_ID = 'fg-default';\n/**\n * The default value of background task id\n * @type {?}\n */\nconst DEFAULT_BG_TASK_ID = 'bg-default';\n/**\n * The default value of loader id\n * @type {?}\n */\nconst DEFAULT_MASTER_LOADER_ID = 'master';\n/** @type {?} */\nconst DEFAULT_TIME = {};\n/** @type {?} */\nconst MIN_DELAY = 0;\n/** @type {?} */\nconst MIN_TIME = 300;\n/** @type {?} */\nconst CLOSING_TIME = 1001;\n/** @type {?} */\nconst BACKGROUND = false;\n/** @type {?} */\nconst FOREGROUND = true;\n/** @type {?} */\nconst WAITING_FOR_OVERLAY_DISAPPEAR = 500;\n/**\n * Http loader taskId\n * @type {?}\n */\nconst HTTP_LOADER_TASK_ID = '$_http-loader';\n/**\n * Router loader taskId\n * @type {?}\n */\nconst ROUTER_LOADER_TASK_ID = '$_router_loader';\n/**\n * The configuration of spinners\n * @type {?}\n */\nconst SPINNER_CONFIG = {\n    'ball-scale-multiple': {\n        divs: 3,\n        class: 'sk-ball-scale-multiple'\n    },\n    'ball-spin': {\n        divs: 8,\n        class: 'sk-ball-spin'\n    },\n    'ball-spin-clockwise': {\n        divs: 8,\n        class: 'sk-ball-spin-clockwise'\n    },\n    'ball-spin-clockwise-fade-rotating': {\n        divs: 8,\n        class: 'sk-ball-spin-clockwise-fade-rotating'\n    },\n    'ball-spin-fade-rotating': {\n        divs: 8,\n        class: 'sk-ball-spin-fade-rotating'\n    },\n    'chasing-dots': {\n        divs: 2,\n        class: 'sk-chasing-dots'\n    },\n    circle: {\n        divs: 12,\n        class: 'sk-circle'\n    },\n    'cube-grid': {\n        divs: 9,\n        class: 'sk-cube-grid'\n    },\n    'double-bounce': {\n        divs: 2,\n        class: 'sk-double-bounce'\n    },\n    'fading-circle': {\n        divs: 12,\n        class: 'sk-fading-circle'\n    },\n    'folding-cube': {\n        divs: 4,\n        class: 'sk-folding-cube'\n    },\n    pulse: {\n        divs: 1,\n        class: 'sk-pulse'\n    },\n    'rectangle-bounce': {\n        divs: 5,\n        class: 'sk-rectangle-bounce'\n    },\n    'rectangle-bounce-party': {\n        divs: 5,\n        class: 'sk-rectangle-bounce-party'\n    },\n    'rectangle-bounce-pulse-out': {\n        divs: 5,\n        class: 'sk-rectangle-bounce-pulse-out'\n    },\n    'rectangle-bounce-pulse-out-rapid': {\n        divs: 5,\n        class: 'sk-rectangle-bounce-pulse-out-rapid'\n    },\n    'rotating-plane': {\n        divs: 1,\n        class: 'sk-rotating-plane'\n    },\n    'square-jelly-box': {\n        divs: 2,\n        class: 'sk-square-jelly-box'\n    },\n    'square-loader': {\n        divs: 1,\n        class: 'sk-square-loader'\n    },\n    'three-bounce': {\n        divs: 3,\n        class: 'sk-three-bounce'\n    },\n    'three-strings': {\n        divs: 3,\n        class: 'sk-three-strings'\n    },\n    'wandering-cubes': {\n        divs: 2,\n        class: 'sk-wandering-cubes'\n    }\n};\n/**\n * The default configuration of ngx-ui-loader\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    bgsColor: '#00ACC1',\n    bgsOpacity: 0.5,\n    bgsPosition: POSITION.bottomRight,\n    bgsSize: 60,\n    bgsType: SPINNER.ballSpinClockwise,\n    blur: 5,\n    delay: 0,\n    fgsColor: '#00ACC1',\n    fgsPosition: POSITION.centerCenter,\n    fgsSize: 60,\n    fgsType: SPINNER.ballSpinClockwise,\n    gap: 24,\n    logoPosition: POSITION.centerCenter,\n    logoSize: 120,\n    logoUrl: '',\n    masterLoaderId: DEFAULT_MASTER_LOADER_ID,\n    overlayBorderRadius: '0',\n    overlayColor: 'rgba(40, 40, 40, 0.8)',\n    pbColor: '#00ACC1',\n    pbDirection: PB_DIRECTION.leftToRight,\n    pbThickness: 3,\n    hasProgressBar: true,\n    text: '',\n    textColor: '#FFFFFF',\n    textPosition: POSITION.centerCenter,\n    maxTime: -1,\n    minTime: 500\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token for ngx-ui-loader configuration\n * @type {?}\n */\nconst NGX_UI_LOADER_CONFIG_TOKEN = new InjectionToken('ngxUiLoaderCustom.config');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxUiLoaderService {\n    /**\n     * Constructor\n     * @param {?} config\n     */\n    constructor(config) {\n        this.config = config;\n        this.defaultConfig = Object.assign({}, DEFAULT_CONFIG);\n        if (this.config) {\n            if (this.config.minTime && this.config.minTime < MIN_TIME) {\n                this.config.minTime = MIN_TIME;\n            }\n            this.defaultConfig = Object.assign({}, this.defaultConfig, this.config);\n        }\n        this.loaders = {};\n        this.showForeground = new BehaviorSubject({ loaderId: '', isShow: false });\n        this.showForeground$ = this.showForeground.asObservable();\n        this.showBackground = new BehaviorSubject({ loaderId: '', isShow: false });\n        this.showBackground$ = this.showBackground.asObservable();\n        this.fgClosing = new BehaviorSubject({ loaderId: '', isShow: false });\n        this.foregroundClosing$ = this.fgClosing.asObservable();\n        this.bgClosing = new BehaviorSubject({ loaderId: '', isShow: false });\n        this.backgroundClosing$ = this.bgClosing.asObservable();\n    }\n    /**\n     * For internal use only.\n     * \\@docs-private\n     * @param {?} loaderId\n     * @return {?}\n     */\n    bindLoaderData(loaderId) {\n        /** @type {?} */\n        let isMaster = false;\n        if (loaderId === this.defaultConfig.masterLoaderId) {\n            this.throwErrorIfMasterLoaderExists(true);\n            isMaster = true;\n        }\n        else {\n            // not master loader\n            this.throwErrorIfLoaderExists(loaderId, true);\n        }\n        if (this.loaders[loaderId]) {\n            this.loaders[loaderId].isBound = true;\n            this.loaders[loaderId].isMaster = isMaster;\n            // emit showEvent after data loader is bound\n            if (this.hasRunningTask(FOREGROUND, loaderId)) {\n                this.showForeground.next({ loaderId, isShow: true });\n            }\n            else {\n                if (this.hasRunningTask(BACKGROUND, loaderId)) {\n                    this.showBackground.next({ loaderId, isShow: true });\n                }\n            }\n        }\n        else {\n            this.createLoaderData(loaderId, isMaster, true);\n        }\n    }\n    /**\n     * For internal use only.\n     * \\@docs-private\n     * @param {?} loaderId\n     * @param {?} newLoaderId\n     * @return {?}\n     */\n    updateLoaderId(loaderId, newLoaderId) {\n        this.throwErrorIfLoaderNotExist(loaderId);\n        if (this.loaders[loaderId].loaderId === this.defaultConfig.masterLoaderId) {\n            console.warn(`[ngx-ui-loader] - Cannot change loaderId of master loader. The current ` +\n                `master's loaderId is \"${this.defaultConfig.masterLoaderId}\". If you really want to ` +\n                `change it, please use NgxUiLoaderModule.forRoot() method.`);\n            return;\n        }\n        if (newLoaderId !== loaderId) {\n            this.throwErrorIfLoaderExists(newLoaderId, true);\n            this.loaders[newLoaderId] = {\n                loaderId: newLoaderId,\n                tasks: Object.assign({}, this.loaders[loaderId].tasks),\n                isMaster: false,\n                isBound: this.loaders[loaderId].isBound\n            };\n            delete this.loaders[loaderId];\n        }\n    }\n    /**\n     * For internal use only.\n     * \\@docs-private\n     * @param {?} loaderId\n     * @return {?}\n     */\n    destroyLoaderData(loaderId) {\n        this.stopAllLoader(loaderId);\n        delete this.loaders[loaderId];\n    }\n    /**\n     * Get default loader configuration\n     * @return {?} default configuration object\n     */\n    getDefaultConfig() {\n        return Object.assign({}, this.defaultConfig);\n    }\n    /**\n     * Get all the loaders\n     * @return {?}\n     */\n    getLoaders() {\n        return JSON.parse(JSON.stringify(this.loaders));\n    }\n    /**\n     * Get data of a specified loader. If loaderId is not provided, it will return data of master loader(if existed)\n     * @param {?=} loaderId\n     * @return {?}\n     */\n    getLoader(loaderId) {\n        if (loaderId) {\n            this.throwErrorIfLoaderNotExist(loaderId);\n        }\n        else {\n            this.throwErrorIfMasterLoaderNotExist();\n            loaderId = this.defaultConfig.masterLoaderId;\n        }\n        return JSON.parse(JSON.stringify(this.loaders[loaderId]));\n    }\n    /**\n     * Start the foreground loading of loader having `loaderId` with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stopLoader() method.\n     * @param {?} loaderId the loader Id\n     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'fd-default' by default.\n     * @param {?=} time\n     * @return {?}\n     */\n    startLoader(loaderId, taskId = DEFAULT_FG_TASK_ID, time) {\n        if (!this.readyToStart(loaderId, taskId, true, time)) {\n            return;\n        }\n        if (!this.loaders[loaderId].tasks[taskId].isOtherRunning) {\n            // no other foreground task running\n            if (this.hasRunningTask(BACKGROUND, loaderId)) {\n                this.backgroundCloseout(loaderId);\n                this.showBackground.next({ loaderId, isShow: false });\n            }\n            this.showForeground.next({ loaderId, isShow: true });\n        }\n    }\n    /**\n     * Start the foreground loading of master loader with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stop() method.\n     * NOTE: Really this function just wraps startLoader() function\n     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'fd-default' by default.\n     * @param {?=} time\n     * @return {?}\n     */\n    start(taskId = DEFAULT_FG_TASK_ID, time) {\n        this.startLoader(this.defaultConfig.masterLoaderId, taskId, time);\n    }\n    /**\n     * Start the background loading of loader having `loaderId` with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stopLoaderBackground() method.\n     * @param {?} loaderId the loader Id\n     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'bg-default' by default.\n     * @param {?=} time\n     * @return {?}\n     */\n    startBackgroundLoader(loaderId, taskId = DEFAULT_BG_TASK_ID, time) {\n        if (!this.readyToStart(loaderId, taskId, false, time)) {\n            return;\n        }\n        if (!this.hasRunningTask(FOREGROUND, loaderId) && !this.loaders[loaderId].tasks[taskId].isOtherRunning) {\n            this.showBackground.next({ loaderId, isShow: true });\n        }\n    }\n    /**\n     * Start the background loading of master loader with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stopBackground() method.\n     * NOTE: Really this function just wraps startBackgroundLoader() function\n     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'bg-default' by default.\n     * @param {?=} time\n     * @return {?}\n     */\n    startBackground(taskId = DEFAULT_BG_TASK_ID, time) {\n        this.startBackgroundLoader(this.defaultConfig.masterLoaderId, taskId, time);\n    }\n    /**\n     * Stop a foreground loading of loader having `loaderId` with specific `taskId`\n     * @param {?} loaderId the loader Id\n     * @param {?=} taskId the optional task Id to stop. If not provided, 'fg-default' is used.\n     * @return {?} Object\n     */\n    stopLoader(loaderId, taskId = DEFAULT_FG_TASK_ID) {\n        if (!this.readyToStop(loaderId, taskId)) {\n            return;\n        }\n        if (!this.hasRunningTask(FOREGROUND, loaderId)) {\n            this.foregroundCloseout(loaderId);\n            this.showForeground.next({ loaderId, isShow: false });\n            if (this.hasRunningTask(BACKGROUND, loaderId)) {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.hasRunningTask(BACKGROUND, loaderId)) {\n                        // still have background tasks\n                        this.showBackground.next({ loaderId, isShow: true });\n                    }\n                }), WAITING_FOR_OVERLAY_DISAPPEAR);\n            }\n        }\n    }\n    /**\n     * Stop a foreground loading of master loader with specific `taskId`\n     * @param {?=} taskId the optional task Id to stop. If not provided, 'fg-default' is used.\n     * @return {?} Object\n     */\n    stop(taskId = DEFAULT_FG_TASK_ID) {\n        this.stopLoader(this.defaultConfig.masterLoaderId, taskId);\n    }\n    /**\n     * Stop a background loading of loader having `loaderId` with specific `taskId`\n     * @param {?} loaderId the loader Id\n     * @param {?=} taskId the optional task Id to stop. If not provided, 'bg-default' is used.\n     * @return {?} Object\n     */\n    stopBackgroundLoader(loaderId, taskId = DEFAULT_BG_TASK_ID) {\n        if (!this.readyToStop(loaderId, taskId)) {\n            return;\n        }\n        if (!this.hasRunningTask(FOREGROUND, loaderId) && !this.hasRunningTask(BACKGROUND, loaderId)) {\n            this.backgroundCloseout(loaderId);\n            this.showBackground.next({ loaderId, isShow: false });\n        }\n    }\n    /**\n     * Stop a background loading of master loader with specific taskId\n     * @param {?=} taskId the optional task Id to stop. If not provided, 'bg-default' is used.\n     * @return {?} Object\n     */\n    stopBackground(taskId = DEFAULT_BG_TASK_ID) {\n        this.stopBackgroundLoader(this.defaultConfig.masterLoaderId, taskId);\n    }\n    /**\n     * Stop all the background and foreground loadings of loader having `loaderId`\n     * @param {?} loaderId the loader Id\n     * @return {?}\n     */\n    stopAllLoader(loaderId) {\n        this.throwErrorIfLoaderNotExist(loaderId);\n        if (this.hasRunningTask(FOREGROUND, loaderId)) {\n            this.foregroundCloseout(loaderId);\n            this.showForeground.next({ loaderId, isShow: false });\n        }\n        else if (this.hasRunningTask(BACKGROUND, loaderId)) {\n            this.backgroundCloseout(loaderId);\n            this.showBackground.next({ loaderId, isShow: false });\n        }\n        this.clearAllTimers(this.loaders[loaderId].tasks);\n        this.loaders[loaderId].tasks = {};\n    }\n    /**\n     * Stop all the background and foreground loadings of master loader\n     * @return {?}\n     */\n    stopAll() {\n        this.stopAllLoader(this.defaultConfig.masterLoaderId);\n    }\n    /**\n     * Create loader data if it does not exist\n     * \\@docs-private\n     * @private\n     * @param {?} loaderId\n     * @param {?} isMaster\n     * @param {?} isBound\n     * @return {?}\n     */\n    createLoaderData(loaderId, isMaster, isBound) {\n        if (!this.loaders[loaderId]) {\n            this.loaders[loaderId] = {\n                loaderId,\n                tasks: {},\n                isMaster,\n                isBound\n            };\n        }\n    }\n    /**\n     * Throw error if the loaderId does not exist.\n     * \\@docs-private\n     * @private\n     * @param {?} loaderId\n     * @return {?}\n     */\n    throwErrorIfLoaderNotExist(loaderId) {\n        if (!this.loaders[loaderId]) {\n            throw new Error(`[ngx-ui-loader] - loaderId \"${loaderId}\" does not exist.`);\n        }\n    }\n    /**\n     * Throw error if the loaderId has already existed.\n     * \\@docs-private\n     * @private\n     * @param {?} loaderId\n     * @param {?=} useIsBoundProp\n     * @return {?}\n     */\n    throwErrorIfLoaderExists(loaderId, useIsBoundProp) {\n        if (this.loaders[loaderId] && (this.loaders[loaderId].isBound && useIsBoundProp)) {\n            throw new Error(`[ngx-ui-loader] - loaderId \"${loaderId}\" is duplicated.`);\n        }\n    }\n    /**\n     * Throw error if the master loader has already existed.\n     * \\@docs-private\n     * @private\n     * @param {?=} useIsBoundProp\n     * @return {?}\n     */\n    throwErrorIfMasterLoaderExists(useIsBoundProp) {\n        if (this.loaders[this.defaultConfig.masterLoaderId] && (this.loaders[this.defaultConfig.masterLoaderId].isBound && useIsBoundProp)) {\n            throw new Error(`[ngx-ui-loader] - The master loader has already existed. ` +\n                `The app should have only one master loader and it should be placed in the root app template`);\n        }\n    }\n    /**\n     * Throw error if the master loader does not exist.\n     * \\@docs-private\n     * @private\n     * @return {?}\n     */\n    throwErrorIfMasterLoaderNotExist() {\n        if (!this.loaders[this.defaultConfig.masterLoaderId]) {\n            throw new Error(`[ngx-ui-loader] - The master loader does not exist.`);\n        }\n    }\n    /**\n     * Manage to close foreground loading\n     * \\@docs-private\n     * @private\n     * @param {?} loaderId the loader id\n     * @return {?}\n     */\n    foregroundCloseout(loaderId) {\n        this.fgClosing.next({ loaderId, isShow: true });\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.fgClosing.next({ loaderId, isShow: false });\n        }), CLOSING_TIME);\n    }\n    /**\n     * Manage to close background loading\n     * \\@docs-private\n     * @private\n     * @param {?} loaderId the loader id\n     * @return {?}\n     */\n    backgroundCloseout(loaderId) {\n        this.bgClosing.next({ loaderId, isShow: true });\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.bgClosing.next({ loaderId, isShow: false });\n        }), CLOSING_TIME);\n    }\n    /**\n     * Clear all timers of the given task\n     * \\@docs-private\n     * @private\n     * @param {?} task\n     * @return {?}\n     */\n    clearTimers(task) {\n        if (task.delayTimer) {\n            clearTimeout(task.delayTimer);\n        }\n        if (task.maxTimer) {\n            clearTimeout(task.maxTimer);\n        }\n        if (task.minTimer) {\n            clearTimeout(task.minTimer);\n        }\n    }\n    /**\n     * Clear all timers of the given tasks\n     * \\@docs-private\n     * @private\n     * @param {?} tasks\n     * @return {?}\n     */\n    clearAllTimers(tasks) {\n        Object.keys(tasks).map((/**\n         * @param {?} id\n         * @return {?}\n         */\n        id => {\n            this.clearTimers(tasks[id]);\n        }));\n    }\n    /**\n     * Check whether the specified loader has a running task with the given `taskId`.\n     * If no `taskId` specified, it will check whether the loader has any running tasks.\n     * For internal use only.\n     * \\@docs-private\n     * @param {?} isForeground foreground task or background task\n     * @param {?} loaderId the loader Id\n     * @param {?=} taskId the optional task Id\n     * @return {?} boolean\n     */\n    hasRunningTask(isForeground, loaderId, taskId) {\n        if (this.loaders[loaderId]) {\n            /** @type {?} */\n            const tasks = this.loaders[loaderId].tasks;\n            if (taskId) {\n                return tasks[taskId] ? (tasks[taskId].startAt ? true : false) : false;\n            }\n            return Object.keys(tasks).some((/**\n             * @param {?} id\n             * @return {?}\n             */\n            id => !!tasks[id].startAt && tasks[id].isForeground === isForeground));\n        }\n        return false;\n    }\n    /**\n     * \\@docs-private\n     * @private\n     * @param {?} loaderId\n     * @param {?} taskId\n     * @param {?} isForeground\n     * @param {?=} time\n     * @return {?}\n     */\n    readyToStart(loaderId, taskId, isForeground, time = DEFAULT_TIME) {\n        this.createLoaderData(loaderId, undefined, false);\n        /** @type {?} */\n        const isOtherRunning = this.hasRunningTask(isForeground, loaderId);\n        if (!this.loaders[loaderId].tasks[taskId]) {\n            this.loaders[loaderId].tasks[taskId] = {\n                taskId,\n                isForeground,\n                minTime: time.minTime >= MIN_TIME ? time.minTime : this.defaultConfig.minTime,\n                maxTime: time.maxTime ? time.maxTime : this.defaultConfig.maxTime,\n                delay: time.delay >= MIN_DELAY ? time.delay : this.defaultConfig.delay\n            };\n        }\n        else {\n            if (this.loaders[loaderId].tasks[taskId].isForeground !== isForeground) {\n                throw new Error(`[ngx-ui-loader] - taskId \"${taskId}\" is duplicated.`);\n            }\n        }\n        if (this.setDelayTimer(this.loaders[loaderId].tasks[taskId], loaderId)) {\n            return false;\n        }\n        this.loaders[loaderId].tasks[taskId] = Object.assign({}, this.loaders[loaderId].tasks[taskId], { isOtherRunning, startAt: Date.now() });\n        this.setMaxTimer(this.loaders[loaderId].tasks[taskId], loaderId);\n        if (!this.loaders[loaderId].isBound) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * \\@docs-private\n     * @private\n     * @param {?} loaderId\n     * @param {?} taskId\n     * @return {?}\n     */\n    readyToStop(loaderId, taskId) {\n        this.throwErrorIfLoaderNotExist(loaderId);\n        /** @type {?} */\n        const task = this.loaders[loaderId].tasks[taskId];\n        if (!task) {\n            return false;\n        }\n        if (task.isDelayed) {\n            this.clearTimers(task);\n            delete this.loaders[loaderId].tasks[taskId];\n            return false;\n        }\n        if (this.setMinTimer(task, loaderId)) {\n            return false;\n        }\n        this.clearTimers(task);\n        delete this.loaders[loaderId].tasks[taskId];\n        return true;\n    }\n    /**\n     * Set delay timer, if `delay` > 0\n     * \\@docs-private\n     * @private\n     * @param {?} task\n     * @param {?} loaderId\n     * @return {?} boolean\n     */\n    setDelayTimer(task, loaderId) {\n        if (task.delay > MIN_DELAY) {\n            if (task.isDelayed) {\n                return true;\n            }\n            if (!task.delayTimer) {\n                task.isDelayed = true;\n                task.delayTimer = setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    task.isDelayed = false;\n                    if (task.isForeground) {\n                        this.startLoader(loaderId, task.taskId);\n                    }\n                    else {\n                        this.startBackgroundLoader(loaderId, task.taskId);\n                    }\n                }), task.delay);\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Set maxTimer if `maxTime` > `minTime`\n     * \\@docs-private\n     * @private\n     * @param {?} task\n     * @param {?} loaderId\n     * @return {?} boolean\n     */\n    setMaxTimer(task, loaderId) {\n        if (task.maxTime > task.minTime) {\n            // restart the task, reset maxTimer\n            if (task.maxTimer) {\n                clearTimeout(task.maxTimer);\n            }\n            task.maxTimer = setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                if (task.isForeground) {\n                    this.stopLoader(loaderId, task.taskId);\n                }\n                else {\n                    this.stopBackgroundLoader(loaderId, task.taskId);\n                }\n            }), task.maxTime);\n        }\n    }\n    /**\n     * Set minTimer if `startAt` + `minTime` > `Date.now()`\n     * \\@docs-private\n     * @private\n     * @param {?} task\n     * @param {?} loaderId\n     * @return {?} boolean\n     */\n    setMinTimer(task, loaderId) {\n        /** @type {?} */\n        const now = Date.now();\n        if (task.startAt) {\n            if (task.startAt + task.minTime > now) {\n                task.minTimer = setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (task.isForeground) {\n                        this.stopLoader(loaderId, task.taskId);\n                    }\n                    else {\n                        this.stopBackgroundLoader(loaderId, task.taskId);\n                    }\n                }), task.startAt + task.minTime - now);\n                return true;\n            }\n        }\n        return false;\n    }\n}\nNgxUiLoaderService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\n/** @nocollapse */\nNgxUiLoaderService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_CONFIG_TOKEN,] }] }\n];\n/** @nocollapse */ NgxUiLoaderService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgxUiLoaderService_Factory() { return new NgxUiLoaderService(ɵɵinject(NGX_UI_LOADER_CONFIG_TOKEN, 8)); }, token: NgxUiLoaderService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Coerce a value (string) to a number\n * @param {?} value\n * @param {?} fallbackValue\n * @return {?}\n */\nfunction coerceNumber(value, fallbackValue) {\n    return !isNaN(parseFloat((/** @type {?} */ (value)))) && !isNaN(Number(value)) ? Number(value) : fallbackValue;\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction getExcludeObj(config) {\n    /** @type {?} */\n    let strs;\n    /** @type {?} */\n    let regExps;\n    if (config) {\n        if (config.exclude) {\n            strs = config.exclude.map((/**\n             * @param {?} url\n             * @return {?}\n             */\n            url => url.toLowerCase()));\n        }\n        if (config.excludeRegexp) {\n            regExps = config.excludeRegexp.map((/**\n             * @param {?} regexp\n             * @return {?}\n             */\n            regexp => new RegExp(regexp, 'i')));\n        }\n    }\n    return { strs, regExps };\n}\n/**\n * @param {?} url\n * @param {?} excludeStrings\n * @param {?} excludeRegexps\n * @return {?}\n */\nfunction isIgnored(url, excludeStrings, excludeRegexps) {\n    if (excludeStrings) {\n        // do not show the loader for urls in the `exclude` list\n        if (excludeStrings.findIndex((/**\n         * @param {?} str\n         * @return {?}\n         */\n        str => url.toLowerCase().startsWith(str))) !== -1) {\n            return true;\n        }\n    }\n    if (excludeRegexps) {\n        // do not show the loader for urls which matches regexps in the `excludeRegexp` list\n        if (excludeRegexps.findIndex((/**\n         * @param {?} regexp\n         * @return {?}\n         */\n        regexp => regexp.test(url))) !== -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxUiLoaderComponent {\n    /**\n     * Constructor\n     * @param {?} domSanitizer\n     * @param {?} changeDetectorRef\n     * @param {?} ngxService\n     */\n    constructor(domSanitizer, changeDetectorRef, ngxService) {\n        this.domSanitizer = domSanitizer;\n        this.changeDetectorRef = changeDetectorRef;\n        this.ngxService = ngxService;\n        this.initialized = false;\n        this.defaultConfig = this.ngxService.getDefaultConfig();\n        this.bgsColor = this.defaultConfig.bgsColor;\n        this.bgsOpacity = this.defaultConfig.bgsOpacity;\n        this.bgsPosition = this.defaultConfig.bgsPosition;\n        this.bgsSize = this.defaultConfig.bgsSize;\n        this.bgsType = this.defaultConfig.bgsType;\n        this.fgsColor = this.defaultConfig.fgsColor;\n        this.fgsPosition = this.defaultConfig.fgsPosition;\n        this.fgsSize = this.defaultConfig.fgsSize;\n        this.fgsType = this.defaultConfig.fgsType;\n        this.gap = this.defaultConfig.gap;\n        this.loaderId = this.defaultConfig.masterLoaderId;\n        this.logoPosition = this.defaultConfig.logoPosition;\n        this.logoSize = this.defaultConfig.logoSize;\n        this.logoUrl = this.defaultConfig.logoUrl;\n        this.overlayBorderRadius = this.defaultConfig.overlayBorderRadius;\n        this.overlayColor = this.defaultConfig.overlayColor;\n        this.pbColor = this.defaultConfig.pbColor;\n        this.pbDirection = this.defaultConfig.pbDirection;\n        this.pbThickness = this.defaultConfig.pbThickness;\n        this.hasProgressBar = this.defaultConfig.hasProgressBar;\n        this.text = this.defaultConfig.text;\n        this.textColor = this.defaultConfig.textColor;\n        this.textPosition = this.defaultConfig.textPosition;\n    }\n    /**\n     * On init event\n     * @return {?}\n     */\n    ngOnInit() {\n        this.initializeSpinners();\n        this.ngxService.bindLoaderData(this.loaderId);\n        this.determinePositions();\n        this.bgsPosition = (/** @type {?} */ (this.validate('bgsPosition', this.bgsPosition, POSITION, this.defaultConfig.bgsPosition)));\n        this.trustedLogoUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.logoUrl);\n        this.pbDirection = (/** @type {?} */ (this.validate('pbDirection', this.pbDirection, PB_DIRECTION, this.defaultConfig.pbDirection)));\n        this.showForegroundWatcher = this.ngxService.showForeground$\n            .pipe(filter((/**\n         * @param {?} showEvent\n         * @return {?}\n         */\n        (showEvent) => this.loaderId === showEvent.loaderId)))\n            .subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this.showForeground = data.isShow;\n            this.changeDetectorRef.markForCheck();\n        }));\n        this.showBackgroundWatcher = this.ngxService.showBackground$\n            .pipe(filter((/**\n         * @param {?} showEvent\n         * @return {?}\n         */\n        (showEvent) => this.loaderId === showEvent.loaderId)))\n            .subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this.showBackground = data.isShow;\n            this.changeDetectorRef.markForCheck();\n        }));\n        this.foregroundClosingWatcher = this.ngxService.foregroundClosing$\n            .pipe(filter((/**\n         * @param {?} showEvent\n         * @return {?}\n         */\n        (showEvent) => this.loaderId === showEvent.loaderId)))\n            .subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this.foregroundClosing = data.isShow;\n            this.changeDetectorRef.markForCheck();\n        }));\n        this.backgroundClosingWatcher = this.ngxService.backgroundClosing$\n            .pipe(filter((/**\n         * @param {?} showEvent\n         * @return {?}\n         */\n        (showEvent) => this.loaderId === showEvent.loaderId)))\n            .subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this.backgroundClosing = data.isShow;\n            this.changeDetectorRef.markForCheck();\n        }));\n        this.initialized = true;\n    }\n    /**\n     * On changes event\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            return;\n        }\n        /** @type {?} */\n        const bgsTypeChange = changes.bgsType;\n        /** @type {?} */\n        const bgsPositionChange = changes.bgsPosition;\n        /** @type {?} */\n        const fgsTypeChange = changes.fgsType;\n        /** @type {?} */\n        const loaderIdChange = changes.loaderId;\n        /** @type {?} */\n        const logoUrlChange = changes.logoUrl;\n        /** @type {?} */\n        const pbDirectionChange = changes.pbDirection;\n        if (fgsTypeChange || bgsTypeChange) {\n            this.initializeSpinners();\n        }\n        if (loaderIdChange) {\n            this.ngxService.updateLoaderId(loaderIdChange.previousValue, this.loaderId);\n        }\n        this.determinePositions();\n        if (bgsPositionChange) {\n            this.bgsPosition = (/** @type {?} */ (this.validate('bgsPosition', this.bgsPosition, POSITION, this.defaultConfig.bgsPosition)));\n        }\n        if (logoUrlChange) {\n            this.trustedLogoUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.logoUrl);\n        }\n        if (pbDirectionChange) {\n            this.pbDirection = (/** @type {?} */ (this.validate('pbDirection', this.pbDirection, PB_DIRECTION, this.defaultConfig.pbDirection)));\n        }\n    }\n    /**\n     * Initialize spinners\n     * @private\n     * @return {?}\n     */\n    initializeSpinners() {\n        this.fgsType = (/** @type {?} */ (this.validate('fgsType', this.fgsType, SPINNER, this.defaultConfig.fgsType)));\n        this.bgsType = (/** @type {?} */ (this.validate('bgsType', this.bgsType, SPINNER, this.defaultConfig.bgsType)));\n        this.fgDivs = Array(SPINNER_CONFIG[this.fgsType].divs).fill(1);\n        this.fgSpinnerClass = SPINNER_CONFIG[this.fgsType].class;\n        this.bgDivs = Array(SPINNER_CONFIG[this.bgsType].divs).fill(1);\n        this.bgSpinnerClass = SPINNER_CONFIG[this.bgsType].class;\n    }\n    /**\n     * Determine the positions of spinner, logo and text\n     * @private\n     * @return {?}\n     */\n    determinePositions() {\n        this.fgsPosition = (/** @type {?} */ (this.validate('fgsPosition', this.fgsPosition, POSITION, this.defaultConfig.fgsPosition)));\n        this.logoPosition = (/** @type {?} */ (this.validate('logoPosition', this.logoPosition, POSITION, this.defaultConfig.logoPosition)));\n        this.textPosition = (/** @type {?} */ (this.validate('textPosition', this.textPosition, POSITION, this.defaultConfig.textPosition)));\n        this.gap = coerceNumber(this.gap, this.defaultConfig.gap);\n        this.logoTop = 'initial';\n        this.spinnerTop = 'initial';\n        this.textTop = 'initial';\n        /** @type {?} */\n        const textSize = 24;\n        if (this.logoPosition.startsWith('center')) {\n            this.logoTop = '50%';\n        }\n        else if (this.logoPosition.startsWith('top')) {\n            this.logoTop = '30px';\n        }\n        if (this.fgsPosition.startsWith('center')) {\n            this.spinnerTop = '50%';\n        }\n        else if (this.fgsPosition.startsWith('top')) {\n            this.spinnerTop = '30px';\n        }\n        if (this.textPosition.startsWith('center')) {\n            this.textTop = '50%';\n        }\n        else if (this.textPosition.startsWith('top')) {\n            this.textTop = '30px';\n        }\n        if (this.fgsPosition === POSITION.centerCenter) {\n            if (this.logoUrl && this.logoPosition === POSITION.centerCenter) {\n                if (this.text && this.textPosition === POSITION.centerCenter) {\n                    // logo, spinner and text\n                    this.logoTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% - ${this.fgsSize / 2}px - ${textSize / 2}px - ${this.gap}px)`);\n                    this.spinnerTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.logoSize / 2}px - ${textSize / 2}px)`);\n                    this.textTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.logoSize / 2}px + ${this.gap}px + ${this.fgsSize / 2}px)`);\n                }\n                else {\n                    // logo and spinner\n                    this.logoTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% - ${this.fgsSize / 2}px - ${this.gap / 2}px)`);\n                    this.spinnerTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.logoSize / 2}px + ${this.gap / 2}px)`);\n                }\n            }\n            else {\n                if (this.text && this.textPosition === POSITION.centerCenter) {\n                    // spinner and text\n                    this.spinnerTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% - ${textSize / 2}px - ${this.gap / 2}px)`);\n                    this.textTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.fgsSize / 2}px + ${this.gap / 2}px)`);\n                }\n            }\n        }\n        else {\n            if (this.logoUrl && this.logoPosition === POSITION.centerCenter && this.text && this.textPosition === POSITION.centerCenter) {\n                // logo and text\n                this.logoTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% - ${textSize / 2}px - ${this.gap / 2}px)`);\n                this.textTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.logoSize / 2}px + ${this.gap / 2}px)`);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} inputName\n     * @param {?} value\n     * @param {?} validTypeObj\n     * @param {?} fallbackValue\n     * @return {?}\n     */\n    validate(inputName, value, validTypeObj, fallbackValue) {\n        if (Object.keys(validTypeObj)\n            .map((/**\n         * @param {?} k\n         * @return {?}\n         */\n        k => validTypeObj[k]))\n            .findIndex((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => v === value)) === -1) {\n            console.error(`[ngx-ui-loader] - ${inputName} (\"${value}\") is invalid. ` + `Default value \"${fallbackValue}\" is used.`);\n            return fallbackValue;\n        }\n        return value;\n    }\n    /**\n     * On destroy event\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.ngxService.destroyLoaderData(this.loaderId);\n        if (this.showForegroundWatcher) {\n            this.showForegroundWatcher.unsubscribe();\n        }\n        if (this.showBackgroundWatcher) {\n            this.showBackgroundWatcher.unsubscribe();\n        }\n        if (this.foregroundClosingWatcher) {\n            this.foregroundClosingWatcher.unsubscribe();\n        }\n        if (this.backgroundClosingWatcher) {\n            this.backgroundClosingWatcher.unsubscribe();\n        }\n    }\n}\nNgxUiLoaderComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngx-ui-loader',\n                template: \"<!-- Progress bar {{{ -->\\n<div\\n  *ngIf=\\\"hasProgressBar\\\"\\n  class=\\\"ngx-progress-bar\\\"\\n  [class.ngx-position-absolute]=\\\"loaderId !== defaultConfig.masterLoaderId\\\"\\n  [ngClass]=\\\"'ngx-progress-bar-' + pbDirection\\\"\\n  [style.height.px]=\\\"pbThickness\\\"\\n  [style.color]=\\\"pbColor\\\"\\n  [class.loading-foreground]=\\\"showForeground\\\"\\n  [class.foreground-closing]=\\\"foregroundClosing\\\"\\n></div>\\n<!-- Progress bar }}} -->\\n\\n<!-- Foreground container {{{ -->\\n<div\\n  class=\\\"ngx-overlay\\\"\\n  [class.ngx-position-absolute]=\\\"loaderId !== defaultConfig.masterLoaderId\\\"\\n  [style.background-color]=\\\"overlayColor\\\"\\n  [style.border-radius]=\\\"overlayBorderRadius\\\"\\n  [class.loading-foreground]=\\\"showForeground\\\"\\n  [class.foreground-closing]=\\\"foregroundClosing\\\"\\n>\\n  <!-- Logo {{{ -->\\n  <img\\n    *ngIf=\\\"logoUrl\\\"\\n    class=\\\"ngx-loading-logo\\\"\\n    [ngClass]=\\\"logoPosition\\\"\\n    [src]=\\\"trustedLogoUrl\\\"\\n    [style.width.px]=\\\"logoSize\\\"\\n    [style.height.px]=\\\"logoSize\\\"\\n    [style.top]=\\\"logoTop\\\"\\n  />\\n  <!-- Logo }}} -->\\n\\n  <!-- Foreground spinner {{{ -->\\n  <div\\n    class=\\\"ngx-foreground-spinner\\\"\\n    [ngClass]=\\\"fgsPosition\\\"\\n    [style.color]=\\\"fgsColor\\\"\\n    [style.width.px]=\\\"fgsSize\\\"\\n    [style.height.px]=\\\"fgsSize\\\"\\n    [style.top]=\\\"spinnerTop\\\"\\n  >\\n    <div [class]=\\\"fgSpinnerClass\\\">\\n      <div *ngFor=\\\"let div of fgDivs\\\"></div>\\n    </div>\\n  </div>\\n  <!-- Foreground spinner }}} -->\\n\\n  <!-- Loading text {{{ -->\\n  <div class=\\\"ngx-loading-text\\\" [ngClass]=\\\"textPosition\\\" [style.top]=\\\"textTop\\\" [style.color]=\\\"textColor\\\">{{ text }}</div>\\n  <!-- Loading text }}} -->\\n</div>\\n<!-- Foreground container }}} -->\\n\\n<!-- Background spinner {{{ -->\\n<div\\n  class=\\\"ngx-background-spinner\\\"\\n  [class.ngx-position-absolute]=\\\"loaderId !== defaultConfig.masterLoaderId\\\"\\n  [ngClass]=\\\"bgsPosition\\\"\\n  [class.loading-background]=\\\"showBackground\\\"\\n  [class.background-closing]=\\\"backgroundClosing\\\"\\n  [style.width.px]=\\\"bgsSize\\\"\\n  [style.height.px]=\\\"bgsSize\\\"\\n  [style.color]=\\\"bgsColor\\\"\\n  [style.opacity]=\\\"bgsOpacity\\\"\\n>\\n  <div [class]=\\\"bgSpinnerClass\\\">\\n    <div *ngFor=\\\"let div of bgDivs\\\"></div>\\n  </div>\\n</div>\\n<!-- Background spinner }}} -->\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".ngx-progress-bar{position:fixed;top:0;left:0;width:100%;height:3px;z-index:99999!important;display:none;color:#00acc1;overflow:hidden}.ngx-progress-bar.foreground-closing,.ngx-progress-bar.loading-foreground{display:block}.ngx-progress-bar.foreground-closing{opacity:0!important;transition:opacity .5s ease-out .5s}.ngx-progress-bar::after,.ngx-progress-bar::before{background-color:currentColor;content:\\\"\\\";display:block;width:100%;height:100%;position:absolute;top:0}.ngx-progress-bar-ltr::before{-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}.ngx-progress-bar-ltr::after{-webkit-animation:20s ease-out progressBar-slide-ltr;animation:20s ease-out progressBar-slide-ltr;-webkit-transform:translate3d(-5%,0,0);transform:translate3d(-5%,0,0)}.ngx-progress-bar-rtl::before{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}.ngx-progress-bar-rtl::after{-webkit-animation:20s ease-out progressBar-slide-rtl;animation:20s ease-out progressBar-slide-rtl;-webkit-transform:translate3d(5%,0,0);transform:translate3d(5%,0,0)}.foreground-closing.ngx-progress-bar-ltr::before{-webkit-animation:1s ease-out progressBar-slide-complete-ltr;animation:1s ease-out progressBar-slide-complete-ltr;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.foreground-closing.ngx-progress-bar-rtl::before{-webkit-animation:1s ease-out progressBar-slide-complete-rtl;animation:1s ease-out progressBar-slide-complete-rtl;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}@-webkit-keyframes progressBar-slide-ltr{from{-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}to{-webkit-transform:translate3d(-5%,0,0);transform:translate3d(-5%,0,0)}}@keyframes progressBar-slide-ltr{from{-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}to{-webkit-transform:translate3d(-5%,0,0);transform:translate3d(-5%,0,0)}}@-webkit-keyframes progressBar-slide-rtl{from{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}to{-webkit-transform:translate3d(5%,0,0);transform:translate3d(5%,0,0)}}@keyframes progressBar-slide-rtl{from{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}to{-webkit-transform:translate3d(5%,0,0);transform:translate3d(5%,0,0)}}@-webkit-keyframes progressBar-slide-complete-ltr{0%{-webkit-transform:translate3d(-75%,0,0);transform:translate3d(-75%,0,0)}50%{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes progressBar-slide-complete-ltr{0%{-webkit-transform:translate3d(-75%,0,0);transform:translate3d(-75%,0,0)}50%{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@-webkit-keyframes progressBar-slide-complete-rtl{0%{-webkit-transform:translate3d(75%,0,0);transform:translate3d(75%,0,0)}50%{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes progressBar-slide-complete-rtl{0%{-webkit-transform:translate3d(75%,0,0);transform:translate3d(75%,0,0)}50%{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.ngx-overlay{position:fixed;top:0;left:0;width:100%;height:100%;z-index:99998!important;background-color:rgba(40,40,40,.8);cursor:progress;display:none}.ngx-overlay.foreground-closing,.ngx-overlay.loading-foreground{display:block}.ngx-overlay.foreground-closing{opacity:0!important;transition:opacity .5s ease-out .5s}.ngx-overlay>.ngx-foreground-spinner{position:fixed;width:60px;height:60px;margin:0;color:#00acc1}.ngx-overlay>.ngx-loading-logo{position:fixed;margin:0;width:120px;height:120px}.ngx-overlay>.ngx-loading-text{position:fixed;margin:0;font-family:sans-serif;font-weight:400;font-size:1.2em;color:#fff}.ngx-background-spinner{position:fixed;z-index:99997!important;width:60px;height:60px;margin:0;color:#00acc1;opacity:.6;display:none}.ngx-background-spinner.background-closing,.ngx-background-spinner.loading-background{display:block}.ngx-background-spinner.background-closing{opacity:0!important;transition:opacity .7s ease-out}.ngx-position-absolute,.ngx-position-absolute>.ngx-foreground-spinner,.ngx-position-absolute>.ngx-loading-logo,.ngx-position-absolute>.ngx-loading-text{position:absolute!important}.ngx-position-absolute.ngx-progress-bar{z-index:99996!important}.ngx-position-absolute.ngx-overlay{z-index:99995!important}.ngx-position-absolute .sk-square-jelly-box>div:nth-child(1),.ngx-position-absolute.ngx-background-spinner{z-index:99994!important}.top-left{top:30px;left:30px}.top-center{top:30px;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.top-right{top:30px;right:30px}.center-left{top:50%;left:30px;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.center-center{top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.center-right{top:50%;right:30px;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.bottom-left{bottom:30px;left:30px}.bottom-center{bottom:30px;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.bottom-right{bottom:30px;right:30px}.sk-ball-scale-multiple,.sk-ball-scale-multiple>div{position:relative;box-sizing:border-box}.sk-ball-scale-multiple{width:100%;height:100%;font-size:0}.sk-ball-scale-multiple>div{display:inline-block;float:none;background-color:currentColor;border:0 solid currentColor;position:absolute;top:0;left:0;width:100%;height:100%;border-radius:100%;opacity:0;-webkit-animation:1s linear infinite ball-scale-multiple;animation:1s linear infinite ball-scale-multiple}.sk-ball-scale-multiple>div:nth-child(2){-webkit-animation-delay:.2s;animation-delay:.2s}.sk-ball-scale-multiple>div:nth-child(3){-webkit-animation-delay:.4s;animation-delay:.4s}@-webkit-keyframes ball-scale-multiple{0%{opacity:0;-webkit-transform:scale(0);transform:scale(0)}5%{opacity:.75}100%{opacity:0;-webkit-transform:scale(1);transform:scale(1)}}@keyframes ball-scale-multiple{0%{opacity:0;-webkit-transform:scale(0);transform:scale(0)}5%{opacity:.75}100%{opacity:0;-webkit-transform:scale(1);transform:scale(1)}}.sk-ball-spin,.sk-ball-spin>div{position:relative;box-sizing:border-box}.sk-ball-spin{width:100%;height:100%;font-size:0}.sk-ball-spin>div{display:inline-block;float:none;background-color:currentColor;border:0 solid currentColor;position:absolute;top:50%;left:50%;width:25%;height:25%;margin-top:-12.5%;margin-left:-12.5%;border-radius:100%;-webkit-animation:1s ease-in-out infinite ball-spin-clockwise;animation:1s ease-in-out infinite ball-spin-clockwise}.sk-ball-spin>div:nth-child(1){top:5%;left:50%;-webkit-animation-delay:-1.125s;animation-delay:-1.125s}.sk-ball-spin>div:nth-child(2){top:18.1801948466%;left:81.8198051534%;-webkit-animation-delay:-1.25s;animation-delay:-1.25s}.sk-ball-spin>div:nth-child(3){top:50%;left:95%;-webkit-animation-delay:-1.375s;animation-delay:-1.375s}.sk-ball-spin>div:nth-child(4){top:81.8198051534%;left:81.8198051534%;-webkit-animation-delay:-1.5s;animation-delay:-1.5s}.sk-ball-spin>div:nth-child(5){top:94.9999999966%;left:50.0000000005%;-webkit-animation-delay:-1.625s;animation-delay:-1.625s}.sk-ball-spin>div:nth-child(6){top:81.8198046966%;left:18.1801949248%;-webkit-animation-delay:-1.75s;animation-delay:-1.75s}.sk-ball-spin>div:nth-child(7){top:49.9999750815%;left:5.0000051215%;-webkit-animation-delay:-1.875s;animation-delay:-1.875s}.sk-ball-spin>div:nth-child(8){top:18.179464974%;left:18.1803700518%;-webkit-animation-delay:-2s;animation-delay:-2s}@-webkit-keyframes ball-spin{0%,100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}20%{opacity:1}80%{opacity:0;-webkit-transform:scale(0);transform:scale(0)}}@keyframes ball-spin{0%,100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}20%{opacity:1}80%{opacity:0;-webkit-transform:scale(0);transform:scale(0)}}.sk-ball-spin-clockwise,.sk-ball-spin-clockwise>div{position:relative;box-sizing:border-box}.sk-ball-spin-clockwise{width:100%;height:100%;font-size:0}.sk-ball-spin-clockwise>div{display:inline-block;float:none;background-color:currentColor;border:0 solid currentColor;position:absolute;top:50%;left:50%;width:25%;height:25%;margin-top:-12.5%;margin-left:-12.5%;border-radius:100%;-webkit-animation:1s ease-in-out infinite ball-spin-clockwise;animation:1s ease-in-out infinite ball-spin-clockwise}.sk-ball-spin-clockwise>div:nth-child(1){top:5%;left:50%;-webkit-animation-delay:-875ms;animation-delay:-875ms}.sk-ball-spin-clockwise>div:nth-child(2){top:18.1801948466%;left:81.8198051534%;-webkit-animation-delay:-.75s;animation-delay:-.75s}.sk-ball-spin-clockwise>div:nth-child(3){top:50%;left:95%;-webkit-animation-delay:-625ms;animation-delay:-625ms}.sk-ball-spin-clockwise>div:nth-child(4){top:81.8198051534%;left:81.8198051534%;-webkit-animation-delay:-.5s;animation-delay:-.5s}.sk-ball-spin-clockwise>div:nth-child(5){top:94.9999999966%;left:50.0000000005%;-webkit-animation-delay:-375ms;animation-delay:-375ms}.sk-ball-spin-clockwise>div:nth-child(6){top:81.8198046966%;left:18.1801949248%;-webkit-animation-delay:-.25s;animation-delay:-.25s}.sk-ball-spin-clockwise>div:nth-child(7){top:49.9999750815%;left:5.0000051215%;-webkit-animation-delay:-125ms;animation-delay:-125ms}.sk-ball-spin-clockwise>div:nth-child(8){top:18.179464974%;left:18.1803700518%;-webkit-animation-delay:0s;animation-delay:0s}@-webkit-keyframes ball-spin-clockwise{0%,100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}20%{opacity:1}80%{opacity:0;-webkit-transform:scale(0);transform:scale(0)}}@keyframes ball-spin-clockwise{0%,100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}20%{opacity:1}80%{opacity:0;-webkit-transform:scale(0);transform:scale(0)}}.sk-ball-spin-clockwise-fade-rotating,.sk-ball-spin-clockwise-fade-rotating>div{position:relative;box-sizing:border-box}.sk-ball-spin-clockwise-fade-rotating{font-size:0;width:100%;height:100%;-webkit-animation:6s linear infinite ball-spin-clockwise-fade-rotating-rotate;animation:6s linear infinite ball-spin-clockwise-fade-rotating-rotate}.sk-ball-spin-clockwise-fade-rotating>div{display:inline-block;float:none;background-color:currentColor;border:0 solid currentColor;position:absolute;top:50%;left:50%;width:25%;height:25%;margin-top:-12.5%;margin-left:-12.5%;border-radius:100%;-webkit-animation:1s linear infinite ball-spin-clockwise-fade-rotating;animation:1s linear infinite ball-spin-clockwise-fade-rotating}.sk-ball-spin-clockwise-fade-rotating>div:nth-child(1){top:5%;left:50%;-webkit-animation-delay:-875ms;animation-delay:-875ms}.sk-ball-spin-clockwise-fade-rotating>div:nth-child(2){top:18.1801948466%;left:81.8198051534%;-webkit-animation-delay:-.75s;animation-delay:-.75s}.sk-ball-spin-clockwise-fade-rotating>div:nth-child(3){top:50%;left:95%;-webkit-animation-delay:-625ms;animation-delay:-625ms}.sk-ball-spin-clockwise-fade-rotating>div:nth-child(4){top:81.8198051534%;left:81.8198051534%;-webkit-animation-delay:-.5s;animation-delay:-.5s}.sk-ball-spin-clockwise-fade-rotating>div:nth-child(5){top:94.9999999966%;left:50.0000000005%;-webkit-animation-delay:-375ms;animation-delay:-375ms}.sk-ball-spin-clockwise-fade-rotating>div:nth-child(6){top:81.8198046966%;left:18.1801949248%;-webkit-animation-delay:-.25s;animation-delay:-.25s}.sk-ball-spin-clockwise-fade-rotating>div:nth-child(7){top:49.9999750815%;left:5.0000051215%;-webkit-animation-delay:-125ms;animation-delay:-125ms}.sk-ball-spin-clockwise-fade-rotating>div:nth-child(8){top:18.179464974%;left:18.1803700518%;-webkit-animation-delay:0s;animation-delay:0s}@-webkit-keyframes ball-spin-clockwise-fade-rotating-rotate{100%{-webkit-transform:rotate(-360deg);transform:rotate(-360deg)}}@keyframes ball-spin-clockwise-fade-rotating-rotate{100%{-webkit-transform:rotate(-360deg);transform:rotate(-360deg)}}@-webkit-keyframes ball-spin-clockwise-fade-rotating{50%{opacity:.25;-webkit-transform:scale(.5);transform:scale(.5)}100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}}@keyframes ball-spin-clockwise-fade-rotating{50%{opacity:.25;-webkit-transform:scale(.5);transform:scale(.5)}100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}}.sk-ball-spin-fade-rotating,.sk-ball-spin-fade-rotating>div{position:relative;box-sizing:border-box}.sk-ball-spin-fade-rotating{width:100%;height:100%;font-size:0;-webkit-animation:6s linear infinite ball-spin-fade-rotate;animation:6s linear infinite ball-spin-fade-rotate}.sk-ball-spin-fade-rotating>div{display:inline-block;float:none;background-color:currentColor;border:0 solid currentColor;position:absolute;top:50%;left:50%;width:25%;height:25%;margin-top:-12.5%;margin-left:-12.5%;border-radius:100%;-webkit-animation:1s linear infinite ball-spin-fade;animation:1s linear infinite ball-spin-fade}.sk-ball-spin-fade-rotating>div:nth-child(1){top:5%;left:50%;-webkit-animation-delay:-1.125s;animation-delay:-1.125s}.sk-ball-spin-fade-rotating>div:nth-child(2){top:18.1801948466%;left:81.8198051534%;-webkit-animation-delay:-1.25s;animation-delay:-1.25s}.sk-ball-spin-fade-rotating>div:nth-child(3){top:50%;left:95%;-webkit-animation-delay:-1.375s;animation-delay:-1.375s}.sk-ball-spin-fade-rotating>div:nth-child(4){top:81.8198051534%;left:81.8198051534%;-webkit-animation-delay:-1.5s;animation-delay:-1.5s}.sk-ball-spin-fade-rotating>div:nth-child(5){top:94.9999999966%;left:50.0000000005%;-webkit-animation-delay:-1.625s;animation-delay:-1.625s}.sk-ball-spin-fade-rotating>div:nth-child(6){top:81.8198046966%;left:18.1801949248%;-webkit-animation-delay:-1.75s;animation-delay:-1.75s}.sk-ball-spin-fade-rotating>div:nth-child(7){top:49.9999750815%;left:5.0000051215%;-webkit-animation-delay:-1.875s;animation-delay:-1.875s}.sk-ball-spin-fade-rotating>div:nth-child(8){top:18.179464974%;left:18.1803700518%;-webkit-animation-delay:-2s;animation-delay:-2s}@-webkit-keyframes ball-spin-fade-rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes ball-spin-fade-rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes ball-spin-fade{0%,100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}50%{opacity:.25;-webkit-transform:scale(.5);transform:scale(.5)}}@keyframes ball-spin-fade{0%,100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}50%{opacity:.25;-webkit-transform:scale(.5);transform:scale(.5)}}.sk-chasing-dots{margin:auto;width:100%;height:100%;position:absolute;text-align:center;-webkit-animation:2s linear infinite sk-chasingDots-rotate;animation:2s linear infinite sk-chasingDots-rotate}.sk-chasing-dots>div{width:60%;height:60%;display:inline-block;position:absolute;top:0;background-color:currentColor;border-radius:100%;-webkit-animation:2s ease-in-out infinite sk-chasingDots-bounce;animation:2s ease-in-out infinite sk-chasingDots-bounce}.sk-chasing-dots>div:nth-child(2){top:auto;bottom:0;-webkit-animation-delay:-1s;animation-delay:-1s}@-webkit-keyframes sk-chasingDots-rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes sk-chasingDots-rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes sk-chasingDots-bounce{0%,100%{-webkit-transform:scale(0);transform:scale(0)}50%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes sk-chasingDots-bounce{0%,100%{-webkit-transform:scale(0);transform:scale(0)}50%{-webkit-transform:scale(1);transform:scale(1)}}.sk-circle{margin:auto;width:100%;height:100%;position:relative}.sk-circle>div{width:100%;height:100%;position:absolute;left:0;top:0}.sk-circle>div::before{content:\\\"\\\";display:block;margin:0 auto;width:15%;height:15%;background-color:currentColor;border-radius:100%;-webkit-animation:1.2s ease-in-out infinite both sk-circle-bounceDelay;animation:1.2s ease-in-out infinite both sk-circle-bounceDelay}.sk-circle>div:nth-child(2){-webkit-transform:rotate(30deg);transform:rotate(30deg)}.sk-circle>div:nth-child(3){-webkit-transform:rotate(60deg);transform:rotate(60deg)}.sk-circle>div:nth-child(4){-webkit-transform:rotate(90deg);transform:rotate(90deg)}.sk-circle>div:nth-child(5){-webkit-transform:rotate(120deg);transform:rotate(120deg)}.sk-circle>div:nth-child(6){-webkit-transform:rotate(150deg);transform:rotate(150deg)}.sk-circle>div:nth-child(7){-webkit-transform:rotate(180deg);transform:rotate(180deg)}.sk-circle>div:nth-child(8){-webkit-transform:rotate(210deg);transform:rotate(210deg)}.sk-circle>div:nth-child(9){-webkit-transform:rotate(240deg);transform:rotate(240deg)}.sk-circle>div:nth-child(10){-webkit-transform:rotate(270deg);transform:rotate(270deg)}.sk-circle>div:nth-child(11){-webkit-transform:rotate(300deg);transform:rotate(300deg)}.sk-circle>div:nth-child(12){-webkit-transform:rotate(330deg);transform:rotate(330deg)}.sk-circle>div:nth-child(2)::before{-webkit-animation-delay:-1.1s;animation-delay:-1.1s}.sk-circle>div:nth-child(3)::before{-webkit-animation-delay:-1s;animation-delay:-1s}.sk-circle>div:nth-child(4)::before{-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-circle>div:nth-child(5)::before{-webkit-animation-delay:-.8s;animation-delay:-.8s}.sk-circle>div:nth-child(6)::before{-webkit-animation-delay:-.7s;animation-delay:-.7s}.sk-circle>div:nth-child(7)::before{-webkit-animation-delay:-.6s;animation-delay:-.6s}.sk-circle>div:nth-child(8)::before{-webkit-animation-delay:-.5s;animation-delay:-.5s}.sk-circle>div:nth-child(9)::before{-webkit-animation-delay:-.4s;animation-delay:-.4s}.sk-circle>div:nth-child(10)::before{-webkit-animation-delay:-.3s;animation-delay:-.3s}.sk-circle>div:nth-child(11)::before{-webkit-animation-delay:-.2s;animation-delay:-.2s}.sk-circle>div:nth-child(12)::before{-webkit-animation-delay:-.1s;animation-delay:-.1s}@-webkit-keyframes sk-circle-bounceDelay{0%,100%,80%{-webkit-transform:scale(0);transform:scale(0)}40%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes sk-circle-bounceDelay{0%,100%,80%{-webkit-transform:scale(0);transform:scale(0)}40%{-webkit-transform:scale(1);transform:scale(1)}}.sk-cube-grid{width:100%;height:100%;margin:auto}.sk-cube-grid>div{width:33%;height:33%;background-color:currentColor;float:left;-webkit-animation:1.3s ease-in-out infinite sk-cubeGrid-scaleDelay;animation:1.3s ease-in-out infinite sk-cubeGrid-scaleDelay}.sk-cube-grid>div:nth-child(1){-webkit-animation-delay:.2s;animation-delay:.2s}.sk-cube-grid>div:nth-child(2){-webkit-animation-delay:.3s;animation-delay:.3s}.sk-cube-grid>div:nth-child(3){-webkit-animation-delay:.4s;animation-delay:.4s}.sk-cube-grid>div:nth-child(4){-webkit-animation-delay:.1s;animation-delay:.1s}.sk-cube-grid>div:nth-child(5){-webkit-animation-delay:.2s;animation-delay:.2s}.sk-cube-grid>div:nth-child(6){-webkit-animation-delay:.3s;animation-delay:.3s}.sk-cube-grid>div:nth-child(7){-webkit-animation-delay:0s;animation-delay:0s}.sk-cube-grid>div:nth-child(8){-webkit-animation-delay:.1s;animation-delay:.1s}.sk-cube-grid>div:nth-child(9){-webkit-animation-delay:.2s;animation-delay:.2s}@-webkit-keyframes sk-cubeGrid-scaleDelay{0%,100%,70%{-webkit-transform:scale3D(1,1,1);transform:scale3D(1,1,1)}35%{-webkit-transform:scale3D(0,0,1);transform:scale3D(0,0,1)}}@keyframes sk-cubeGrid-scaleDelay{0%,100%,70%{-webkit-transform:scale3D(1,1,1);transform:scale3D(1,1,1)}35%{-webkit-transform:scale3D(0,0,1);transform:scale3D(0,0,1)}}.sk-double-bounce{width:100%;height:100%;position:relative;margin:auto}.sk-double-bounce>div{width:100%;height:100%;border-radius:50%;background-color:currentColor;opacity:.6;position:absolute;top:0;left:0;-webkit-animation:2s ease-in-out infinite sk-doubleBounce-bounce;animation:2s ease-in-out infinite sk-doubleBounce-bounce}.sk-double-bounce>div:nth-child(2){-webkit-animation-delay:-1s;animation-delay:-1s}@-webkit-keyframes sk-doubleBounce-bounce{0%,100%{-webkit-transform:scale(0);transform:scale(0)}50%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes sk-doubleBounce-bounce{0%,100%{-webkit-transform:scale(0);transform:scale(0)}50%{-webkit-transform:scale(1);transform:scale(1)}}.sk-fading-circle{margin:auto;width:100%;height:100%;position:relative}.sk-fading-circle>div{width:100%;height:100%;position:absolute;left:0;top:0}.sk-fading-circle>div::before{content:\\\"\\\";display:block;margin:0 auto;width:15%;height:15%;background-color:currentColor;border-radius:100%;-webkit-animation:1.2s ease-in-out infinite both sk-fadingCircle-FadeDelay;animation:1.2s ease-in-out infinite both sk-fadingCircle-FadeDelay}.sk-fading-circle>div:nth-child(2){-webkit-transform:rotate(30deg);transform:rotate(30deg)}.sk-fading-circle>div:nth-child(3){-webkit-transform:rotate(60deg);transform:rotate(60deg)}.sk-fading-circle>div:nth-child(4){-webkit-transform:rotate(90deg);transform:rotate(90deg)}.sk-fading-circle>div:nth-child(5){-webkit-transform:rotate(120deg);transform:rotate(120deg)}.sk-fading-circle>div:nth-child(6){-webkit-transform:rotate(150deg);transform:rotate(150deg)}.sk-fading-circle>div:nth-child(7){-webkit-transform:rotate(180deg);transform:rotate(180deg)}.sk-fading-circle>div:nth-child(8){-webkit-transform:rotate(210deg);transform:rotate(210deg)}.sk-fading-circle>div:nth-child(9){-webkit-transform:rotate(240deg);transform:rotate(240deg)}.sk-fading-circle>div:nth-child(10){-webkit-transform:rotate(270deg);transform:rotate(270deg)}.sk-fading-circle>div:nth-child(11){-webkit-transform:rotate(300deg);transform:rotate(300deg)}.sk-fading-circle>div:nth-child(12){-webkit-transform:rotate(330deg);transform:rotate(330deg)}.sk-fading-circle>div:nth-child(2)::before{-webkit-animation-delay:-1.1s;animation-delay:-1.1s}.sk-fading-circle>div:nth-child(3)::before{-webkit-animation-delay:-1s;animation-delay:-1s}.sk-fading-circle>div:nth-child(4)::before{-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-fading-circle>div:nth-child(5)::before{-webkit-animation-delay:-.8s;animation-delay:-.8s}.sk-fading-circle>div:nth-child(6)::before{-webkit-animation-delay:-.7s;animation-delay:-.7s}.sk-fading-circle>div:nth-child(7)::before{-webkit-animation-delay:-.6s;animation-delay:-.6s}.sk-fading-circle>div:nth-child(8)::before{-webkit-animation-delay:-.5s;animation-delay:-.5s}.sk-fading-circle>div:nth-child(9)::before{-webkit-animation-delay:-.4s;animation-delay:-.4s}.sk-fading-circle>div:nth-child(10)::before{-webkit-animation-delay:-.3s;animation-delay:-.3s}.sk-fading-circle>div:nth-child(11)::before{-webkit-animation-delay:-.2s;animation-delay:-.2s}.sk-fading-circle>div:nth-child(12)::before{-webkit-animation-delay:-.1s;animation-delay:-.1s}@-webkit-keyframes sk-fadingCircle-FadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}@keyframes sk-fadingCircle-FadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}.sk-folding-cube{margin:auto;width:100%;height:100%;position:relative;-webkit-transform:rotateZ(45deg);transform:rotateZ(45deg)}.sk-folding-cube>div{float:left;width:50%;height:50%;position:relative;-webkit-transform:scale(1.1);transform:scale(1.1)}.sk-folding-cube>div::before{content:\\\"\\\";position:absolute;top:0;left:0;width:100%;height:100%;background-color:currentColor;-webkit-animation:2.4s linear infinite both sk-foldingCube-angle;animation:2.4s linear infinite both sk-foldingCube-angle;-webkit-transform-origin:100% 100%;transform-origin:100% 100%}.sk-folding-cube>div:nth-child(2){-webkit-transform:scale(1.1) rotateZ(90deg);transform:scale(1.1) rotateZ(90deg)}.sk-folding-cube>div:nth-child(3){-webkit-transform:scale(1.1) rotateZ(270deg);transform:scale(1.1) rotateZ(270deg)}.sk-folding-cube>div:nth-child(4){-webkit-transform:scale(1.1) rotateZ(180deg);transform:scale(1.1) rotateZ(180deg)}.sk-folding-cube>div:nth-child(2)::before{-webkit-animation-delay:.3s;animation-delay:.3s}.sk-folding-cube>div:nth-child(3)::before{-webkit-animation-delay:.9s;animation-delay:.9s}.sk-folding-cube>div:nth-child(4)::before{-webkit-animation-delay:.6s;animation-delay:.6s}@-webkit-keyframes sk-foldingCube-angle{0%,10%{-webkit-transform:perspective(140px) rotateX(-180deg);transform:perspective(140px) rotateX(-180deg);opacity:0}25%,75%{-webkit-transform:perspective(140px) rotateX(0);transform:perspective(140px) rotateX(0);opacity:1}100%,90%{-webkit-transform:perspective(140px) rotateY(180deg);transform:perspective(140px) rotateY(180deg);opacity:0}}@keyframes sk-foldingCube-angle{0%,10%{-webkit-transform:perspective(140px) rotateX(-180deg);transform:perspective(140px) rotateX(-180deg);opacity:0}25%,75%{-webkit-transform:perspective(140px) rotateX(0);transform:perspective(140px) rotateX(0);opacity:1}100%,90%{-webkit-transform:perspective(140px) rotateY(180deg);transform:perspective(140px) rotateY(180deg);opacity:0}}.sk-pulse{width:100%;height:100%;margin:auto}.sk-pulse>div{width:100%;height:100%;background-color:currentColor;border-radius:100%;-webkit-animation:1s ease-in-out infinite sk-pulse-scaleOut;animation:1s ease-in-out infinite sk-pulse-scaleOut}@-webkit-keyframes sk-pulse-scaleOut{0%{-webkit-transform:scale(0);transform:scale(0)}100%{-webkit-transform:scale(1);transform:scale(1);opacity:0}}@keyframes sk-pulse-scaleOut{0%{-webkit-transform:scale(0);transform:scale(0)}100%{-webkit-transform:scale(1);transform:scale(1);opacity:0}}.sk-rectangle-bounce{margin:auto;width:100%;height:100%;text-align:center;font-size:0}.sk-rectangle-bounce>div{background-color:currentColor;height:100%;width:10%;margin:0 5%;display:inline-block;-webkit-animation:1.2s ease-in-out infinite sk-rectangleBounce-stretchDelay;animation:1.2s ease-in-out infinite sk-rectangleBounce-stretchDelay}.sk-rectangle-bounce>div:nth-child(2){-webkit-animation-delay:-1.1s;animation-delay:-1.1s}.sk-rectangle-bounce>div:nth-child(3){-webkit-animation-delay:-1s;animation-delay:-1s}.sk-rectangle-bounce>div:nth-child(4){-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-rectangle-bounce>div:nth-child(5){-webkit-animation-delay:-.8s;animation-delay:-.8s}@-webkit-keyframes sk-rectangleBounce-stretchDelay{0%,100%,40%{-webkit-transform:scaleY(.4);transform:scaleY(.4)}20%{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes sk-rectangleBounce-stretchDelay{0%,100%,40%{-webkit-transform:scaleY(.4);transform:scaleY(.4)}20%{-webkit-transform:scaleY(1);transform:scaleY(1)}}.sk-rectangle-bounce-party,.sk-rectangle-bounce-party>div{position:relative;box-sizing:border-box}.sk-rectangle-bounce-party{margin:auto;width:100%;height:100%;text-align:center;font-size:0}.sk-rectangle-bounce-party>div{display:inline-block;float:none;background-color:currentColor;border:0 solid currentColor;width:10%;height:100%;margin:0 5%;border-radius:0;-webkit-animation-name:rectangle-bounce-party;animation-name:rectangle-bounce-party;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite}.sk-rectangle-bounce-party>div:nth-child(1){-webkit-animation-duration:.43s;animation-duration:.43s;-webkit-animation-delay:-.23s;animation-delay:-.23s}.sk-rectangle-bounce-party>div:nth-child(2){-webkit-animation-duration:.62s;animation-duration:.62s;-webkit-animation-delay:-.32s;animation-delay:-.32s}.sk-rectangle-bounce-party>div:nth-child(3){-webkit-animation-duration:.43s;animation-duration:.43s;-webkit-animation-delay:-.44s;animation-delay:-.44s}.sk-rectangle-bounce-party>div:nth-child(4){-webkit-animation-duration:.8s;animation-duration:.8s;-webkit-animation-delay:-.31s;animation-delay:-.31s}.sk-rectangle-bounce-party>div:nth-child(5){-webkit-animation-duration:.74s;animation-duration:.74s;-webkit-animation-delay:-.24s;animation-delay:-.24s}@-webkit-keyframes rectangle-bounce-party{0%,100%{-webkit-transform:scaleY(1);transform:scaleY(1)}50%{-webkit-transform:scaleY(.4);transform:scaleY(.4)}}@keyframes rectangle-bounce-party{0%,100%{-webkit-transform:scaleY(1);transform:scaleY(1)}50%{-webkit-transform:scaleY(.4);transform:scaleY(.4)}}.sk-rectangle-bounce-pulse-out,.sk-rectangle-bounce-pulse-out>div{position:relative;box-sizing:border-box}.sk-rectangle-bounce-pulse-out{margin:auto;width:100%;height:100%;text-align:center;font-size:0}.sk-rectangle-bounce-pulse-out>div{display:inline-block;float:none;background-color:currentColor;border:0 solid currentColor;width:10%;height:100%;margin:0 5%;border-radius:0;-webkit-animation:.9s cubic-bezier(.85,.25,.37,.85) infinite rectangle-bounce-pulse-out;animation:.9s cubic-bezier(.85,.25,.37,.85) infinite rectangle-bounce-pulse-out}.sk-rectangle-bounce-pulse-out>div:nth-child(3){-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-rectangle-bounce-pulse-out>div:nth-child(2),.sk-rectangle-bounce-pulse-out>div:nth-child(4){-webkit-animation-delay:-.7s;animation-delay:-.7s}.sk-rectangle-bounce-pulse-out>div:nth-child(1),.sk-rectangle-bounce-pulse-out>div:nth-child(5){-webkit-animation-delay:-.5s;animation-delay:-.5s}@-webkit-keyframes rectangle-bounce-pulse-out{0%,100%{-webkit-transform:scaley(1);transform:scaley(1)}50%{-webkit-transform:scaley(.4);transform:scaley(.4)}}@keyframes rectangle-bounce-pulse-out{0%,100%{-webkit-transform:scaley(1);transform:scaley(1)}50%{-webkit-transform:scaley(.4);transform:scaley(.4)}}.sk-rectangle-bounce-pulse-out-rapid,.sk-rectangle-bounce-pulse-out-rapid>div{position:relative;box-sizing:border-box}.sk-rectangle-bounce-pulse-out-rapid{margin:auto;width:100%;height:100%;text-align:center;font-size:0}.sk-rectangle-bounce-pulse-out-rapid>div{display:inline-block;float:none;background-color:currentColor;border:0 solid currentColor;width:10%;height:100%;margin:0 5%;border-radius:0;-webkit-animation:.9s cubic-bezier(.11,.49,.38,.78) infinite rectangle-bounce-pulse-out-rapid;animation:.9s cubic-bezier(.11,.49,.38,.78) infinite rectangle-bounce-pulse-out-rapid}.sk-rectangle-bounce-pulse-out-rapid>div:nth-child(3){-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-rectangle-bounce-pulse-out-rapid>div:nth-child(2),.sk-rectangle-bounce-pulse-out-rapid>div:nth-child(4){-webkit-animation-delay:-.65s;animation-delay:-.65s}.sk-rectangle-bounce-pulse-out-rapid>div:nth-child(1),.sk-rectangle-bounce-pulse-out-rapid>div:nth-child(5){-webkit-animation-delay:-.4s;animation-delay:-.4s}@-webkit-keyframes rectangle-bounce-pulse-out-rapid{0%,90%{-webkit-transform:scaley(1);transform:scaley(1)}80%{-webkit-transform:scaley(.4);transform:scaley(.4)}}@keyframes rectangle-bounce-pulse-out-rapid{0%,90%{-webkit-transform:scaley(1);transform:scaley(1)}80%{-webkit-transform:scaley(.4);transform:scaley(.4)}}.sk-rotating-plane{width:100%;height:100%;text-align:center;margin:auto}.sk-rotating-plane>div{width:100%;height:100%;background-color:currentColor;-webkit-animation:1.2s ease-in-out infinite sk-rotatePlane;animation:1.2s ease-in-out infinite sk-rotatePlane}@-webkit-keyframes sk-rotatePlane{0%{-webkit-transform:perspective(120px) rotateX(0) rotateY(0);transform:perspective(120px) rotateX(0) rotateY(0)}50%{-webkit-transform:perspective(120px) rotateX(-180.1deg) rotateY(0);transform:perspective(120px) rotateX(-180.1deg) rotateY(0)}100%{-webkit-transform:perspective(120px) rotateX(-180deg) rotateY(-179.9deg);transform:perspective(120px) rotateX(-180deg) rotateY(-179.9deg)}}@keyframes sk-rotatePlane{0%{-webkit-transform:perspective(120px) rotateX(0) rotateY(0);transform:perspective(120px) rotateX(0) rotateY(0)}50%{-webkit-transform:perspective(120px) rotateX(-180.1deg) rotateY(0);transform:perspective(120px) rotateX(-180.1deg) rotateY(0)}100%{-webkit-transform:perspective(120px) rotateX(-180deg) rotateY(-179.9deg);transform:perspective(120px) rotateX(-180deg) rotateY(-179.9deg)}}.sk-square-jelly-box,.sk-square-jelly-box>div{position:relative;box-sizing:border-box}.sk-square-jelly-box{width:100%;height:100%;font-size:0}.sk-square-jelly-box>div{display:inline-block;float:none;background-color:currentColor;border:0 solid currentColor}.sk-square-jelly-box>div:nth-child(1),.sk-square-jelly-box>div:nth-child(2){position:absolute;left:0;width:100%}.sk-square-jelly-box>div:nth-child(1){top:-25%;z-index:99997;height:100%;border-radius:10%;-webkit-animation:.6s linear -.1s infinite square-jelly-box-animate;animation:.6s linear -.1s infinite square-jelly-box-animate}.sk-square-jelly-box>div:nth-child(2){bottom:-9%;height:10%;background:#000;border-radius:50%;opacity:.2;-webkit-animation:.6s linear -.1s infinite square-jelly-box-shadow;animation:.6s linear -.1s infinite square-jelly-box-shadow}@-webkit-keyframes square-jelly-box-animate{17%{border-bottom-right-radius:10%}25%{-webkit-transform:translateY(25%) rotate(22.5deg);transform:translateY(25%) rotate(22.5deg)}50%{border-bottom-right-radius:100%;-webkit-transform:translateY(50%) scale(1,.9) rotate(45deg);transform:translateY(50%) scale(1,.9) rotate(45deg)}75%{-webkit-transform:translateY(25%) rotate(67.5deg);transform:translateY(25%) rotate(67.5deg)}100%{-webkit-transform:translateY(0) rotate(90deg);transform:translateY(0) rotate(90deg)}}@keyframes square-jelly-box-animate{17%{border-bottom-right-radius:10%}25%{-webkit-transform:translateY(25%) rotate(22.5deg);transform:translateY(25%) rotate(22.5deg)}50%{border-bottom-right-radius:100%;-webkit-transform:translateY(50%) scale(1,.9) rotate(45deg);transform:translateY(50%) scale(1,.9) rotate(45deg)}75%{-webkit-transform:translateY(25%) rotate(67.5deg);transform:translateY(25%) rotate(67.5deg)}100%{-webkit-transform:translateY(0) rotate(90deg);transform:translateY(0) rotate(90deg)}}@-webkit-keyframes square-jelly-box-shadow{50%{-webkit-transform:scale(1.25,1);transform:scale(1.25,1)}}@keyframes square-jelly-box-shadow{50%{-webkit-transform:scale(1.25,1);transform:scale(1.25,1)}}.sk-square-loader,.sk-square-loader>div{position:relative;box-sizing:border-box}.sk-square-loader{font-size:0;width:100%;height:100%}.sk-square-loader>div{display:inline-block;float:none;border:3px solid currentColor;width:100%;height:100%;background:0 0;border-radius:0;-webkit-animation:2s infinite square-loader;animation:2s infinite square-loader}.sk-square-loader>div:after{display:inline-block;width:100%;vertical-align:top;content:\\\"\\\";background-color:currentColor;-webkit-animation:2s ease-in infinite square-loader-inner;animation:2s ease-in infinite square-loader-inner}@-webkit-keyframes square-loader{0%{-webkit-transform:rotate(0);transform:rotate(0)}25%,50%{-webkit-transform:rotate(180deg);transform:rotate(180deg)}100%,75%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes square-loader{0%{-webkit-transform:rotate(0);transform:rotate(0)}25%,50%{-webkit-transform:rotate(180deg);transform:rotate(180deg)}100%,75%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes square-loader-inner{0%,100%,25%{height:0}50%,75%{height:100%}}@keyframes square-loader-inner{0%,100%,25%{height:0}50%,75%{height:100%}}.sk-three-bounce{margin:auto;width:100%;height:100%;text-align:center}.sk-three-bounce>div{margin-top:35%;width:30%;height:30%;background-color:currentColor;border-radius:100%;display:inline-block;-webkit-animation:1.4s ease-in-out infinite both sk-threeBounce-bounceDelay;animation:1.4s ease-in-out infinite both sk-threeBounce-bounceDelay}.bottom-center>.sk-three-bounce>div,.bottom-left>.sk-three-bounce>div,.bottom-right>.sk-three-bounce>div{margin-top:70%!important}.top-center>.sk-three-bounce>div,.top-left>.sk-three-bounce>div,.top-right>.sk-three-bounce>div{margin-top:0!important}.sk-three-bounce>div:nth-child(1){-webkit-animation-delay:-.32s;animation-delay:-.32s}.sk-three-bounce>div:nth-child(2){-webkit-animation-delay:-.16s;animation-delay:-.16s}@-webkit-keyframes sk-threeBounce-bounceDelay{0%,100%,80%{-webkit-transform:scale(0);transform:scale(0)}40%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes sk-threeBounce-bounceDelay{0%,100%,80%{-webkit-transform:scale(0);transform:scale(0)}40%{-webkit-transform:scale(1);transform:scale(1)}}.sk-three-strings{width:100%;height:100%}.sk-three-strings>div{position:absolute;box-sizing:border-box;width:100%;height:100%;border-radius:50%}.sk-three-strings>div:nth-child(1){left:0;top:0;-webkit-animation:1s linear infinite sk-threeStrings-rotateOne;animation:1s linear infinite sk-threeStrings-rotateOne;border-bottom:3px solid currentColor}.sk-three-strings>div:nth-child(2){right:0;top:0;-webkit-animation:1s linear infinite sk-threeStrings-rotateTwo;animation:1s linear infinite sk-threeStrings-rotateTwo;border-right:3px solid currentColor}.sk-three-strings>div:nth-child(3){right:0;bottom:0;-webkit-animation:1s linear infinite sk-threeStrings-rotateThree;animation:1s linear infinite sk-threeStrings-rotateThree;border-top:3px solid currentColor}@-webkit-keyframes sk-threeStrings-rotateOne{0%{-webkit-transform:rotateX(35deg) rotateY(-45deg) rotateZ(0);transform:rotateX(35deg) rotateY(-45deg) rotateZ(0)}100%{-webkit-transform:rotateX(35deg) rotateY(-45deg) rotateZ(360deg);transform:rotateX(35deg) rotateY(-45deg) rotateZ(360deg)}}@keyframes sk-threeStrings-rotateOne{0%{-webkit-transform:rotateX(35deg) rotateY(-45deg) rotateZ(0);transform:rotateX(35deg) rotateY(-45deg) rotateZ(0)}100%{-webkit-transform:rotateX(35deg) rotateY(-45deg) rotateZ(360deg);transform:rotateX(35deg) rotateY(-45deg) rotateZ(360deg)}}@-webkit-keyframes sk-threeStrings-rotateTwo{0%{-webkit-transform:rotateX(50deg) rotateY(10deg) rotateZ(0);transform:rotateX(50deg) rotateY(10deg) rotateZ(0)}100%{-webkit-transform:rotateX(50deg) rotateY(10deg) rotateZ(360deg);transform:rotateX(50deg) rotateY(10deg) rotateZ(360deg)}}@keyframes sk-threeStrings-rotateTwo{0%{-webkit-transform:rotateX(50deg) rotateY(10deg) rotateZ(0);transform:rotateX(50deg) rotateY(10deg) rotateZ(0)}100%{-webkit-transform:rotateX(50deg) rotateY(10deg) rotateZ(360deg);transform:rotateX(50deg) rotateY(10deg) rotateZ(360deg)}}@-webkit-keyframes sk-threeStrings-rotateThree{0%{-webkit-transform:rotateX(35deg) rotateY(55deg) rotateZ(0);transform:rotateX(35deg) rotateY(55deg) rotateZ(0)}100%{-webkit-transform:rotateX(35deg) rotateY(55deg) rotateZ(360deg);transform:rotateX(35deg) rotateY(55deg) rotateZ(360deg)}}@keyframes sk-threeStrings-rotateThree{0%{-webkit-transform:rotateX(35deg) rotateY(55deg) rotateZ(0);transform:rotateX(35deg) rotateY(55deg) rotateZ(0)}100%{-webkit-transform:rotateX(35deg) rotateY(55deg) rotateZ(360deg);transform:rotateX(35deg) rotateY(55deg) rotateZ(360deg)}}.sk-wandering-cubes{margin:auto;width:100%;height:100%;position:relative;text-align:center}.sk-wandering-cubes>div{background-color:currentColor;width:25%;height:25%;position:absolute;top:0;left:0;-webkit-animation:1.8s ease-in-out infinite sk-wanderingCubes-cubeMove;animation:1.8s ease-in-out infinite sk-wanderingCubes-cubeMove}.sk-wandering-cubes>div:nth-child(2){-webkit-animation-delay:-.9s;animation-delay:-.9s}@-webkit-keyframes sk-wanderingCubes-cubeMove{25%{-webkit-transform:translateX(290%) rotate(-90deg) scale(.5);transform:translateX(290%) rotate(-90deg) scale(.5)}50%{-webkit-transform:translateX(290%) translateY(290%) rotate(-179deg);transform:translateX(290%) translateY(290%) rotate(-179deg)}50.1%{-webkit-transform:translateX(290%) translateY(290%) rotate(-180deg);transform:translateX(290%) translateY(290%) rotate(-180deg)}75%{-webkit-transform:translateX(0) translateY(290%) rotate(-270deg) scale(.5);transform:translateX(0) translateY(290%) rotate(-270deg) scale(.5)}100%{-webkit-transform:rotate(-360deg);transform:rotate(-360deg)}}@keyframes sk-wanderingCubes-cubeMove{25%{-webkit-transform:translateX(290%) rotate(-90deg) scale(.5);transform:translateX(290%) rotate(-90deg) scale(.5)}50%{-webkit-transform:translateX(290%) translateY(290%) rotate(-179deg);transform:translateX(290%) translateY(290%) rotate(-179deg)}50.1%{-webkit-transform:translateX(290%) translateY(290%) rotate(-180deg);transform:translateX(290%) translateY(290%) rotate(-180deg)}75%{-webkit-transform:translateX(0) translateY(290%) rotate(-270deg) scale(.5);transform:translateX(0) translateY(290%) rotate(-270deg) scale(.5)}100%{-webkit-transform:rotate(-360deg);transform:rotate(-360deg)}}\"]\n            }] }\n];\n/** @nocollapse */\nNgxUiLoaderComponent.ctorParameters = () => [\n    { type: DomSanitizer },\n    { type: ChangeDetectorRef },\n    { type: NgxUiLoaderService }\n];\nNgxUiLoaderComponent.propDecorators = {\n    bgsColor: [{ type: Input }],\n    bgsOpacity: [{ type: Input }],\n    bgsPosition: [{ type: Input }],\n    bgsSize: [{ type: Input }],\n    bgsType: [{ type: Input }],\n    fgsColor: [{ type: Input }],\n    fgsPosition: [{ type: Input }],\n    fgsSize: [{ type: Input }],\n    fgsType: [{ type: Input }],\n    gap: [{ type: Input }],\n    loaderId: [{ type: Input }],\n    logoPosition: [{ type: Input }],\n    logoSize: [{ type: Input }],\n    logoUrl: [{ type: Input }],\n    overlayBorderRadius: [{ type: Input }],\n    overlayColor: [{ type: Input }],\n    pbColor: [{ type: Input }],\n    pbDirection: [{ type: Input }],\n    pbThickness: [{ type: Input }],\n    hasProgressBar: [{ type: Input }],\n    text: [{ type: Input }],\n    textColor: [{ type: Input }],\n    textPosition: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxUiLoaderBlurredDirective {\n    /**\n     * @param {?} elementRef\n     * @param {?} renderer\n     * @param {?} loader\n     */\n    constructor(elementRef, renderer, loader) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.loader = loader;\n        this.blurNumber = this.loader.getDefaultConfig().blur;\n        this.loaderId = this.loader.getDefaultConfig().masterLoaderId;\n    }\n    /**\n     * @return {?}\n     */\n    get blur() {\n        return this.blurNumber;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set blur(value) {\n        this.blurNumber = coerceNumber(value, this.loader.getDefaultConfig().blur);\n    }\n    /**\n     * On Init event\n     * @return {?}\n     */\n    ngOnInit() {\n        this.showForegroundWatcher = this.loader.showForeground$\n            .pipe(filter((/**\n         * @param {?} showEvent\n         * @return {?}\n         */\n        (showEvent) => this.loaderId === showEvent.loaderId)))\n            .subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            if (data.isShow) {\n                /** @type {?} */\n                const filterValue = `blur(${this.blurNumber}px)`;\n                this.renderer.setStyle(this.elementRef.nativeElement, '-webkit-filter', filterValue);\n                this.renderer.setStyle(this.elementRef.nativeElement, 'filter', filterValue);\n            }\n            else {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (!this.loader.hasRunningTask(FOREGROUND, data.loaderId)) {\n                        this.renderer.setStyle(this.elementRef.nativeElement, '-webkit-filter', 'none');\n                        this.renderer.setStyle(this.elementRef.nativeElement, 'filter', 'none');\n                    }\n                }), WAITING_FOR_OVERLAY_DISAPPEAR);\n            }\n        }));\n    }\n    /**\n     * On destroy event\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.showForegroundWatcher) {\n            this.showForegroundWatcher.unsubscribe();\n        }\n    }\n}\nNgxUiLoaderBlurredDirective.decorators = [\n    { type: Directive, args: [{ selector: '[ngxUiLoaderBlurred]' },] }\n];\n/** @nocollapse */\nNgxUiLoaderBlurredDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: NgxUiLoaderService }\n];\nNgxUiLoaderBlurredDirective.propDecorators = {\n    blur: [{ type: Input }],\n    loaderId: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxUiLoaderModule {\n    /**\n     * forRoot\n     * @param {?} ngxUiLoaderConfig\n     * @return {?} A module with its provider dependencies\n     */\n    static forRoot(ngxUiLoaderConfig) {\n        return {\n            ngModule: NgxUiLoaderModule,\n            providers: [\n                {\n                    provide: NGX_UI_LOADER_CONFIG_TOKEN,\n                    useValue: ngxUiLoaderConfig\n                }\n            ]\n        };\n    }\n}\nNgxUiLoaderModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [NgxUiLoaderComponent, NgxUiLoaderBlurredDirective],\n                exports: [NgxUiLoaderComponent, NgxUiLoaderBlurredDirective]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token for ngx-ui-loader-router configuration\n * @type {?}\n */\nconst NGX_UI_LOADER_ROUTER_CONFIG_TOKEN = new InjectionToken('ngxUiLoaderRouterCustom.config');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxUiLoaderRouterModule {\n    /**\n     * Constructor\n     * @param {?} parentModule\n     * @param {?} customConfig\n     * @param {?} router\n     * @param {?} loader\n     */\n    constructor(parentModule, customConfig, router, loader) {\n        if (parentModule) {\n            throw new Error('[ngx-ui-loader] - NgxUiLoaderRouterModule is already loaded. It should be imported in the root `AppModule` only!');\n        }\n        /** @type {?} */\n        let config = {\n            loaderId: loader.getDefaultConfig().masterLoaderId,\n            showForeground: true\n        };\n        this.exclude = getExcludeObj(customConfig);\n        if (customConfig) {\n            config = Object.assign({}, config, customConfig);\n        }\n        router.events.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (event instanceof NavigationStart) {\n                if (!isIgnored(event.url, this.exclude.strs, this.exclude.regExps)) {\n                    if (config.showForeground) {\n                        loader.startLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n                    }\n                    else {\n                        loader.startBackgroundLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n                    }\n                }\n            }\n            if (event instanceof NavigationEnd || event instanceof NavigationCancel || event instanceof NavigationError) {\n                if (!isIgnored(event.url, this.exclude.strs, this.exclude.regExps)) {\n                    if (config.showForeground) {\n                        loader.stopLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n                    }\n                    else {\n                        loader.stopBackgroundLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n                    }\n                }\n            }\n        }));\n    }\n    /**\n     * forRoot\n     * @param {?} routerConfig\n     * @return {?} A module with its provider dependencies\n     */\n    static forRoot(routerConfig) {\n        return {\n            ngModule: NgxUiLoaderRouterModule,\n            providers: [\n                {\n                    provide: NGX_UI_LOADER_ROUTER_CONFIG_TOKEN,\n                    useValue: routerConfig\n                }\n            ]\n        };\n    }\n}\nNgxUiLoaderRouterModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n/** @nocollapse */\nNgxUiLoaderRouterModule.ctorParameters = () => [\n    { type: NgxUiLoaderRouterModule, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_ROUTER_CONFIG_TOKEN,] }] },\n    { type: Router },\n    { type: NgxUiLoaderService }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token for ngx-ui-loader-http configuration\n * @type {?}\n */\nconst NGX_UI_LOADER_HTTP_CONFIG_TOKEN = new InjectionToken('ngxUiLoaderHttpCustom.config');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxUiLoaderHttpInterceptor {\n    /**\n     * Constructor\n     * @param {?} customConfig\n     * @param {?} loader\n     */\n    constructor(customConfig, loader) {\n        this.loader = loader;\n        this.count = 0;\n        this.config = {\n            loaderId: this.loader.getDefaultConfig().masterLoaderId,\n            showForeground: false\n        };\n        this.exclude = getExcludeObj(customConfig);\n        if (customConfig) {\n            this.config = Object.assign({}, this.config, customConfig);\n        }\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        if (isIgnored(req.url, this.exclude.strs, this.exclude.regExps)) {\n            return next.handle(req);\n        }\n        this.count++;\n        if (this.config.showForeground) {\n            this.loader.startLoader(this.config.loaderId, HTTP_LOADER_TASK_ID, this.config);\n        }\n        else {\n            this.loader.startBackgroundLoader(this.config.loaderId, HTTP_LOADER_TASK_ID, this.config);\n        }\n        return next.handle(req).pipe(finalize((/**\n         * @return {?}\n         */\n        () => {\n            this.count--;\n            if (this.count === 0) {\n                if (this.config.showForeground) {\n                    this.loader.stopLoader(this.config.loaderId, HTTP_LOADER_TASK_ID);\n                }\n                else {\n                    this.loader.stopBackgroundLoader(this.config.loaderId, HTTP_LOADER_TASK_ID);\n                }\n            }\n        })));\n    }\n}\nNgxUiLoaderHttpInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nNgxUiLoaderHttpInterceptor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_HTTP_CONFIG_TOKEN,] }] },\n    { type: NgxUiLoaderService }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxUiLoaderHttpModule {\n    /**\n     * Constructor\n     * @param {?} parentModule\n     */\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('[ngx-ui-loader] - NgxUiLoaderHttpModule is already loaded. It should be imported in the root `AppModule` only!');\n        }\n    }\n    /**\n     * forRoot\n     * @param {?} httpConfig\n     * @return {?} A module with its provider dependencies\n     */\n    static forRoot(httpConfig) {\n        return {\n            ngModule: NgxUiLoaderHttpModule,\n            providers: [\n                {\n                    provide: NGX_UI_LOADER_HTTP_CONFIG_TOKEN,\n                    useValue: httpConfig\n                }\n            ]\n        };\n    }\n}\nNgxUiLoaderHttpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    {\n                        provide: HTTP_INTERCEPTORS,\n                        useClass: NgxUiLoaderHttpInterceptor,\n                        multi: true\n                    }\n                ]\n            },] }\n];\n/** @nocollapse */\nNgxUiLoaderHttpModule.ctorParameters = () => [\n    { type: NgxUiLoaderHttpModule, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgxUiLoaderHttpModule, NgxUiLoaderModule, NgxUiLoaderRouterModule, NgxUiLoaderService, PB_DIRECTION, POSITION, SPINNER, NGX_UI_LOADER_CONFIG_TOKEN as ɵa, NgxUiLoaderComponent as ɵb, NgxUiLoaderBlurredDirective as ɵc, NGX_UI_LOADER_ROUTER_CONFIG_TOKEN as ɵd, NgxUiLoaderHttpInterceptor as ɵe, NGX_UI_LOADER_HTTP_CONFIG_TOKEN as ɵf };\n"]}