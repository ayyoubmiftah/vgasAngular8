{"version":3,"file":"image-cropper.component.d.ts","sources":["/Users/AYYOUB/Desktop/a/a/AYYOUB/node_modules/ngx-image-cropper/lib/component/image-cropper.component.d.ts"],"sourcesContent":["import { ElementRef, EventEmitter, OnChanges, SimpleChanges, ChangeDetectorRef, NgZone } from '@angular/core';\nimport { DomSanitizer, SafeUrl, SafeStyle } from '@angular/platform-browser';\nimport { CropperPosition, ImageCroppedEvent } from '../interfaces';\nexport declare type OutputType = 'base64' | 'file' | 'both';\nexport declare class ImageCropperComponent implements OnChanges {\n    private sanitizer;\n    private cd;\n    private zone;\n    private originalImage;\n    private transformedImage;\n    private originalBase64;\n    private transformedBase64;\n    private moveStart;\n    private maxSize;\n    private originalSize;\n    private transformedSize;\n    private transformations;\n    private setImageMaxSizeRetries;\n    private cropperScaledMinWidth;\n    private cropperScaledMinHeight;\n    safeImgDataUrl: SafeUrl | string;\n    marginLeft: SafeStyle | string;\n    imageVisible: boolean;\n    sourceImage: ElementRef;\n    imageChangedEvent: any;\n    imageBase64: string;\n    imageFile: File;\n    format: 'png' | 'jpeg' | 'bmp' | 'webp' | 'ico';\n    outputType: OutputType;\n    maintainAspectRatio: boolean;\n    aspectRatio: number;\n    resizeToWidth: number;\n    resizeToHeight: number;\n    cropperMinWidth: number;\n    cropperMinHeight: number;\n    roundCropper: boolean;\n    onlyScaleDown: boolean;\n    imageQuality: number;\n    autoCrop: boolean;\n    backgroundColor: string;\n    containWithinAspectRatio: boolean;\n    cropper: CropperPosition;\n    alignImage: 'left' | 'center';\n    imageCropped: EventEmitter<ImageCroppedEvent>;\n    startCropImage: EventEmitter<void>;\n    imageLoaded: EventEmitter<void>;\n    cropperReady: EventEmitter<void>;\n    loadImageFailed: EventEmitter<void>;\n    constructor(sanitizer: DomSanitizer, cd: ChangeDetectorRef, zone: NgZone);\n    ngOnChanges(changes: SimpleChanges): void;\n    private initCropper;\n    private loadImageFile;\n    private isValidImageType;\n    private checkExifAndLoadBase64Image;\n    private checkRotation;\n    private getTransformedSize;\n    private transformImageBase64;\n    private setTransformedImage;\n    private transformOriginalImage;\n    imageLoadedInView(): void;\n    private checkImageMaxSizeRecursively;\n    onResize(): void;\n    rotateLeft(): Promise<void>;\n    rotateRight(): Promise<void>;\n    flipHorizontal(): Promise<void>;\n    flipVertical(): Promise<void>;\n    resetImage(): void;\n    private resizeCropperPosition;\n    private resetCropperPosition;\n    startMove(event: any, moveType: string, position?: string | null): void;\n    moveImg(event: any): void;\n    private setMaxSize;\n    private setCropperScaledMinSize;\n    private setCropperScaledMinWidth;\n    private setCropperScaledMinHeight;\n    private checkCropperPosition;\n    moveStop(): void;\n    private move;\n    private resize;\n    private checkAspectRatio;\n    private doAutoCrop;\n    crop(outputType?: OutputType): ImageCroppedEvent | Promise<ImageCroppedEvent> | null;\n    private getImagePosition;\n    private getOffsetImagePosition;\n    private cropToOutputType;\n    private cropToBase64;\n    private cropToFile;\n    private getQuality;\n    private getResizeRatio;\n    private getClientX;\n    private getClientY;\n}\n"],"names":[],"mappings":"AAAA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA;"}